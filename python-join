#!/usr/bin/env python3

#  Purpose:
#    This program joins lines from two user-input files based on a common key, where the key is assumed to be the first value on each line unless otherwise specified by the user at invocation.
#  Overview of main algorithm:
#    The main algorithm takes a list of keys that have been found to exist in both input files.
#    It then goes through the first file one line at a time, taking the key from each line and appending it to an output list, followed by the remaining values of that line. 
#    Then, if the key is in the joint keys list, it searches through the second file to find the line with the matching key and appends the values of that line to the output list.
#    The output list is then converted to a space-separated string and output.
#    The algorithm then goes through the second file one line at a time.
#    If the key is NOT in the joint keys list, it then outputs that line in the same way it did with lines from the first file and shared-key lines from the second file.
#  Algorithm efficiency:
#    The time complexity of the main algorithm is O(nm) where n is the length of the first file and m is the length of the second file.
#    The algorithm works for input files that do not fit into memory, as it only accesses one line of each file at a time. 
#    It is possible, for extremely large input files, that the lists of keys that the algorithm constructs could become very large.  If this became an issue, we could write the keys to a file and access it one line at a time rather than hold it all in memory.
#  Assumptions;
#    -Input files comform to the "accepted input" description in README.md
#    -Within an input file, no keys are repeated.


import sys
import os.path
import argparse

def parse_command_line_arguments():
  parser = argparse.ArgumentParser()
  parser.add_argument("left_file", help="name of file to be used as left file in key join")
  parser.add_argument("right_file", help="name of file to be used as right file in key join")
  parser.add_argument("--left-key", help="index to use as key in left file", type=int)
  parser.add_argument("--right-key", help="index to use as key in right file", type=int)
  args = parser.parse_args()
  return args

def validate_input_files(args):
  # Check that first two positional arguments are indeed files
  if os.path.isfile(args.left_file) and os.path.isfile(args.right_file):
    left_file = args.left_file
    right_file = args.right_file
    return left_file, right_file
  else: 
    sys.stderr.write("\nInput files not found.\n\n")
    
def set_key_indices(args):
  # For first/left file 
  if args.left_key:
    left_index = args.left_key - 1
  else:
    left_index = 0
  # For second/right file
  if args.right_key:
    right_index = args.right_key - 1
  else:
    right_index = 0
  return left_index, right_index 

def line_to_list(line):
  clean_line = line.rstrip('\n')
  line_list = clean_line.split(" ")
  return line_list

def get_keys(infile, key_index):
  keys = []
  with open(infile) as f:
    for line in f:
      line_list = line_to_list(line)
      try:
        keys.append(line_list[key_index])
      except IndexError:
        print("\nThe index value provided is not valid -- please choose a value that does not exceed the length of the shortest line in "+infile+".\n")
        raise
  return keys

def get_joint_keys(comparison_key_list, infile, key_index):
  joint_keys = []
  with open(infile) as f:
    for line in f:
      line_list = line_to_list(line)
      try:
        if line_list[key_index] in comparison_key_list:
          joint_keys.append(line_list[key_index])
      except IndexError:
        print("\nThe index value provided is not valid -- please choose a value that does not exceed the length of the shortest line in "+infile+".\n")
        raise
  return joint_keys

def generate_output(left_file, right_file, left_index, right_index, joint_keys):
  with open(left_file) as lf:
    # Create a key-first output list for each line in left_file
    for line in lf:
      line_list = line_to_list(line)
      key = line_list.pop(left_index)
      out = []
      out.append(key)
      for item in line_list:
        out.append(item)
      # If the line's key is shared with a line in the second file, go through the second file and find the corresponding line.  Add that line's values to the output list.
      if key in joint_keys:
        with open(right_file) as rf:
          for right_line in rf:
            right_line_list = line_to_list(right_line)
            if right_line_list[right_index] == key:
              right_line_list.pop(right_index)
              for right_item in right_line_list:
                out.append(right_item)
      # Convert the output list to a space-separated string and print.
      print(' '.join(out))
  with open(right_file) as f:
    # Go through each line of second file
    for line in f:
      line_list = line_to_list(line)
      key = line_list.pop(right_index)
      # If the line's key was not shared with any lines from first file, create a key-first output list, convert to a space-separated string, and print 
      if key not in joint_keys:
        out = []
        out.append(key)
        for item in line_list:
          out.append(item)
        print(' '.join(out))

def main():
  # Collect and validate input
  args = parse_command_line_arguments()
  left_file, right_file = validate_input_files(args)
  left_index, right_index = set_key_indices(args)  

  # Determine keys that are common between both input files
  left_keys = get_keys(left_file, left_index)
  joint_keys = get_joint_keys(left_keys, right_file, right_index)

  generate_output(left_file, right_file, left_index, right_index, joint_keys)

if __name__ == "__main__":
  main()
